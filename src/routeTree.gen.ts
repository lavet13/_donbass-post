/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicShopCostCalculationOrderRouteImport } from './routes/_public/shop-cost-calculation-order'
import { Route as PublicAuthRouteImport } from './routes/_public/auth'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicShopCostCalculationOrderRoute =
  PublicShopCostCalculationOrderRouteImport.update({
    id: '/shop-cost-calculation-order',
    path: '/shop-cost-calculation-order',
    getParentRoute: () => PublicRouteRoute,
  } as any)
const PublicAuthRoute = PublicAuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/unauthorized': typeof UnauthorizedRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/auth': typeof PublicAuthRoute
  '/shop-cost-calculation-order': typeof PublicShopCostCalculationOrderRoute
  '/': typeof PublicIndexRoute
}
export interface FileRoutesByTo {
  '/unauthorized': typeof UnauthorizedRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/auth': typeof PublicAuthRoute
  '/shop-cost-calculation-order': typeof PublicShopCostCalculationOrderRoute
  '/': typeof PublicIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_public/auth': typeof PublicAuthRoute
  '/_public/shop-cost-calculation-order': typeof PublicShopCostCalculationOrderRoute
  '/_public/': typeof PublicIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/unauthorized'
    | '/dashboard'
    | '/auth'
    | '/shop-cost-calculation-order'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/unauthorized'
    | '/dashboard'
    | '/auth'
    | '/shop-cost-calculation-order'
    | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_public'
    | '/unauthorized'
    | '/_authenticated/dashboard'
    | '/_public/auth'
    | '/_public/shop-cost-calculation-order'
    | '/_public/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  UnauthorizedRoute: typeof UnauthorizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/shop-cost-calculation-order': {
      id: '/_public/shop-cost-calculation-order'
      path: '/shop-cost-calculation-order'
      fullPath: '/shop-cost-calculation-order'
      preLoaderRoute: typeof PublicShopCostCalculationOrderRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/auth': {
      id: '/_public/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof PublicAuthRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

interface PublicRouteRouteChildren {
  PublicAuthRoute: typeof PublicAuthRoute
  PublicShopCostCalculationOrderRoute: typeof PublicShopCostCalculationOrderRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicAuthRoute: PublicAuthRoute,
  PublicShopCostCalculationOrderRoute: PublicShopCostCalculationOrderRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  UnauthorizedRoute: UnauthorizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
